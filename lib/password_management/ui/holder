// @dart=2.9

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
import 'package:wallpost/_common_widgets/alert/alert.dart';
import 'package:wallpost/_common_widgets/app_bars/simple_app_bar.dart';
import 'package:wallpost/_common_widgets/buttons/circular_back_button.dart';
import 'package:wallpost/_common_widgets/buttons/circular_icon_button.dart';
import 'package:wallpost/_common_widgets/form_widgets/password_text_field.dart';
import 'package:wallpost/_common_widgets/keyboard_dismisser/on_tap_keyboard_dismisser.dart';
import 'package:wallpost/_common_widgets/loader/loader.dart';
import 'package:wallpost/_common_widgets/text_styles/text_styles.dart';
import 'package:wallpost/_shared/constants/app_colors.dart';
import 'package:wallpost/_shared/exceptions/wp_exception.dart';
import 'package:wallpost/_wp_core/user_management/services/current_user_provider.dart';
import 'package:wallpost/password_management/entities/change_password_form.dart';
import 'package:wallpost/password_management/services/password_changer.dart';

class ChangePasswordScreen extends StatefulWidget {
  @override
  _ChangePasswordScreenState createState() => _ChangePasswordScreenState();
}

class _ChangePasswordScreenState extends State<ChangePasswordScreen> {
  final _formKey = GlobalKey<FormState>();
  var _showLogo = true;
  Loader _loader;
  var _currentPasswordTextController = TextEditingController();
  var _newPasswordTextController = TextEditingController();
  var _confirmPasswordTextController = TextEditingController();
  StreamSubscription<bool> _keyboardSubscription;

  @override
  void initState() {
    super.initState();
    _loader = Loader(context);
    var keyboardVisibilityController = KeyboardVisibilityController();
    _keyboardSubscription = keyboardVisibilityController.onChange.listen((bool visible) {
      setState(() => _showLogo = visible ? false : true);
    });
  }

  @override
  void dispose() {
    _keyboardSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return OnTapKeyboardDismisser(
      child: Scaffold(
        backgroundColor: Colors.white,
        resizeToAvoidBottomInset: true,
        appBar: SimpleAppBar(
          title: 'Change Password',
          leadingButtons: [CircularBackButton(onPressed: () => Navigator.pop(context))],
          trailingButtons: [
            CircularIconButton(
              iconName: 'assets/icons/check_mark_icon.svg',
              onPressed: _changePassword,
            )
          ],
          showDivider: true,
        ),
        body: Container(
          height: double.infinity,
          width: double.infinity,
          padding: EdgeInsets.symmetric(horizontal: 12),
          child: SingleChildScrollView(
            child: Column(
              children: <Widget>[
                profileImageAndNameWidget(),
                descriptionText(),
                SizedBox(height: 12),
                formUI(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget profileImageAndNameWidget() {
    return AnimatedContainer(
      duration: Duration(milliseconds: 100),
      curve: Curves.easeInOut,
      height: _showLogo ? 180 : 0,
      child: Center(
        child: Column(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: <Widget>[
          Container(
            width: 100,
            height: 100,
            decoration: BoxDecoration(
                border: Border.all(color: AppColors.defaultColor, width: 1), borderRadius: BorderRadius.circular(50)),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(50),
              child: AspectRatio(
                aspectRatio: 1 / 1,
                child: ClipOval(
                  child: FadeInImage.assetNetwork(
                      fit: BoxFit.cover,
                      placeholder: "assets/icons/user_image_placeholder.png",
                      image: CurrentUserProvider().getCurrentUser().profileImageUrl),
                ),
              ),
            ),
          ),
          Text(
            CurrentUserProvider().getCurrentUser().fullName,
            style: TextStyles.titleTextStyle,
          ),
        ]),
      ),
    );
  }

  Widget descriptionText() {
    return Container(
      child: Text(
          'You need to type in your current password to make sure its not someone else trying to access your data',
          style: TextStyles.subTitleTextStyle),
    );
  }

  Widget formUI() {
    return Container(
      child: Form(
        key: _formKey,
        child: Center(
          child: Column(
            children: <Widget>[
              PasswordTextField(
                label: "Current Password",
                controller: _currentPasswordTextController,
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please Enter Current Password';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),
              PasswordTextField(
                label: "New Password",
                controller: _newPasswordTextController,
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please Enter New Password';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),
              PasswordTextField(
                label: "Confirm New Password",
                controller: _confirmPasswordTextController,
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please Re-Enter New Password';
                  } else if (value != _newPasswordTextController.text) {
                    return 'The Passwords Do Not Match';
                  }
                  return null;
                },
              ),
              SizedBox(height: 10),
            ],
          ),
        ),
      ),
    );
  }

  void _changePassword() async {
    if (_formKey.currentState.validate() == false) return;

    await _loader.show('Changing your password...');
    try {
      var changePasswordForm = ChangePasswordForm(
        oldPassword: _currentPasswordTextController.text,
        newPassword: _newPasswordTextController.text,
      );
      var _ = await PasswordChanger().changePassword(changePasswordForm);
      await _loader.hide();
      Alert.showSimpleAlert(
        context,
        title: 'Password Changed',
        message: 'Your password has been changed successfully',
        buttonTitle: 'Okay',
        onPressed: () {
          Navigator.pop(context);
        },
      );
    } on WPException catch (e) {
      await _loader.hide();
      Alert.showSimpleAlert(
        context,
        title: 'Failed to Change Password',
        message: e.userReadableMessage,
        buttonTitle: 'Okay',
        onPressed: () {},
      );
    }
  }
}


///-------


// @dart=2.9

import 'package:flutter/material.dart';
import 'package:wallpost/_common_widgets/alert/alert.dart';
import 'package:wallpost/_common_widgets/app_bars/simple_app_bar.dart';
import 'package:wallpost/_common_widgets/buttons/circular_back_button.dart';
import 'package:wallpost/_common_widgets/buttons/rounded_action_button.dart';
import 'package:wallpost/_common_widgets/form_widgets/login_text_field.dart';
import 'package:wallpost/_common_widgets/status_bar_color/status_bar_color_setter.dart';
import 'package:wallpost/_routing/route_names.dart';
import 'package:wallpost/_shared/exceptions/wp_exception.dart';
import 'package:wallpost/password_management/entities/reset_password_form.dart';
import 'package:wallpost/password_management/services/password_resetter.dart';

class ForgotPasswordScreen extends StatefulWidget {
  @override
  _ForgotPasswordState createState() => _ForgotPasswordState();
}

class _ForgotPasswordState extends State<ForgotPasswordScreen> {
  final _formKey = GlobalKey<FormState>();
  String _accountNumber;
  String _email;
  var _isLoading = false;

  @override
  Widget build(BuildContext context) {
    StatusBarColorSetter.setColorToWhite();
    return Scaffold(
      appBar: SimpleAppBar(
        title: 'Password Recovery',
        leadingButtons: [CircularBackButton(onPressed: () => Navigator.pop(context))],
      ),
      body: Container(
        margin: EdgeInsets.only(bottom: 60),
        padding: EdgeInsets.symmetric(horizontal: 12),
        color: Colors.white,
        width: double.infinity,
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              LoginTextField(
                hint: 'Account Number',
                keyboardType: TextInputType.number,
                validator: (value) => value.length < 1 ? 'Please enter an account number' : null,
                onSaved: (value) => _accountNumber = value,
              ),
              SizedBox(height: 20),
              LoginTextField(
                hint: 'Email',
                keyboardType: TextInputType.visiblePassword,
                validator: (value) => value.length < 1 ? 'Please enter your email address' : null,
                onSaved: (value) => _email = value,
              ),
              SizedBox(height: 20),
              RoundedRectangleActionButton(
                title: 'Reset Password',
                borderColor: Colors.grey.withOpacity(0.3),
                onPressed: () {
                  setState(() {
                    _submit();
                  });
                },
                showLoader: _isLoading,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _submit() async {
    final form = _formKey.currentState;
    if (form.validate()) {
      form.save();
      setState(() => _isLoading = true);

      var resetPasswordForm = ResetPasswordForm(_accountNumber, _email);
      try {
        var _ = await PasswordResetter().resetPassword(resetPasswordForm);
        Navigator.pushNamedAndRemoveUntil(
          context,
          RouteNames.forgotPasswordSuccess,
          (_) => false,
        );
      } on WPException catch (error) {
        setState(() => _isLoading = false);
        Alert.showSimpleAlert(
          context,
          title: 'Reset Password Failed',
          message: error.userReadableMessage,
          buttonTitle: 'Okay',
        );
      }
    }
  }
}



//--------


// @dart=2.9

import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:wallpost/_common_widgets/buttons/rounded_action_button.dart';
import 'package:wallpost/_common_widgets/text_styles/text_styles.dart';
import 'package:wallpost/_routing/route_names.dart';
import 'package:wallpost/_shared/constants/app_colors.dart';

class ForgotPasswordSuccessScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        padding: EdgeInsets.symmetric(horizontal: 20),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                  border: Border.all(color: AppColors.successColor, width: 3), borderRadius: BorderRadius.circular(50)),
              child: Container(
                margin: EdgeInsets.all(10),
                child: SvgPicture.asset(
                  'assets/icons/check_mark_icon.svg',
                  width: 40,
                  height: 40,
                ),
              ),
            ),
            Container(
              margin: EdgeInsets.only(bottom: 30, left: 10, right: 10, top: 30),
              child: Text(
                'We have sent a password reset link to your email address. Please check your email account and click the password reset link to reset your password.',
                style: TextStyles.subTitleTextStyle,
                textAlign: TextAlign.center,
              ),
            ),
            RoundedRectangleActionButton(
              title: 'Go back to login',
              color: AppColors.successColor,
              onPressed: () {
                Navigator.of(context).pushNamed(RouteNames.login);
              },
            ),
          ],
        ),
      ),
    );
  }
}
